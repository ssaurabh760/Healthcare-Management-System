/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.Delivery;

import Hospital.Employee;
import Hospital.Patient;
import Warehouse.MedicalSupplyInventory;
import Warehouse.Warehouse;
import Warehouse.WarehouseOrder;
import Warehouse.WarehouseOrderList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shrey
 */
public class Delivery extends javax.swing.JPanel {

    /**
     * Creates new form Delivery
     */
    Warehouse warehouse;
    Employee employee;
    public Delivery(Warehouse warehouse, Employee employee) {
        initComponents();
        this.warehouse = warehouse;
        this.employee = employee;
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(51, 204, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Current Orders");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 40, 260, 40));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Order ID", "Equipment Name", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 100, 660, 200));

        jButton1.setBackground(new java.awt.Color(255, 255, 204));
        jButton1.setText("Delivered");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 360, 170, 50));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/3.jpg"))); // NOI18N
        jLabel2.setText("jLabel2");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 740, 490));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int selectedRowIndex = jTable1.getSelectedRow();
       
        if (selectedRowIndex<0) { 
            JOptionPane.showMessageDialog(this, "Please select a row.");
            return;
        }
        WarehouseOrder warehouseOrder = (WarehouseOrder) model.getValueAt(selectedRowIndex, 0);
        warehouseOrder.setIsDelivered(true);
        for(MedicalSupplyInventory medicalSupplyInventory : warehouse.getMedicalSupplyInventoryDirectory().getMedicalSupplyInventoryList()) {
            if(medicalSupplyInventory.getEquipName().equals(warehouseOrder.getEquipName())) {
                Integer currentQuantity = Integer.valueOf(medicalSupplyInventory.getQuantity());
                Integer newQuantity = currentQuantity + Integer.valueOf(warehouseOrder.getQuantity());
                medicalSupplyInventory.setQuantity(String.valueOf(newQuantity));
            }
        }
        populateTable();
        
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        for(WarehouseOrderList warehouseOrderListArray : warehouse.getWarehouseOrderList()) {
            String orderId = warehouseOrderListArray.getId();
            for(WarehouseOrder warehouseOrder : warehouseOrderListArray.getWarehouseOrderList()) {
                if(!warehouseOrder.isIsDelivered()) {
                    Object[] row = new Object[3];
                    row[0] = warehouseOrder;
                    row[1] = warehouseOrder.getEquipName();
                    row[2] = warehouseOrder.getQuantity();
                    model.addRow(row);
                }
            }
        }        
    }
}
